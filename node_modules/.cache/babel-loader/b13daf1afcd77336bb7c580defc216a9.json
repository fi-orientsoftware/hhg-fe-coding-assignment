{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\n\nconst useMutation = ({\n  apiCallback,\n  onSuccess,\n  onFailure,\n  onFinish\n}) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const request = useCallback(async data => {\n    try {\n      setIsLoading(true);\n      const result = await apiCallback(data);\n\n      if (result) {\n        onSuccess && onSuccess(result);\n      }\n    } catch (error) {\n      onFailure && onFailure(error);\n    }\n\n    onFinish && onFinish();\n    setIsLoading(false);\n  }, [setIsLoading, onSuccess, onFinish, onFailure, apiCallback]);\n  return {\n    isLoading,\n    request\n  };\n};\n\n_s(useMutation, \"RQG8VWlukzOejqgF80Y0/BFJjtc=\");\n\nexport default useMutation;","map":{"version":3,"sources":["C:/Users/aly.hanafi/Downloads/hhg-fe-coding-assignment/hhg-fe-coding-assignment/src/hook/useMutation.ts"],"names":["useCallback","useState","useMutation","apiCallback","onSuccess","onFailure","onFinish","isLoading","setIsLoading","request","data","result","error"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AASA,MAAMC,WAAW,GAAG,CAAC;AACpBC,EAAAA,WADoB;AAEpBC,EAAAA,SAFoB;AAGpBC,EAAAA,SAHoB;AAIpBC,EAAAA;AAJoB,CAAD,KAKQ;AAAA;;AAC3B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAU,KAAV,CAA1C;AAEA,QAAMQ,OAAO,GAAGT,WAAW,CAC1B,MAAOU,IAAP,IAAqB;AACpB,QAAI;AACHF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAMG,MAAM,GAAG,MAAMR,WAAW,CAACO,IAAD,CAAhC;;AAEA,UAAIC,MAAJ,EAAY;AACXP,QAAAA,SAAS,IAAIA,SAAS,CAACO,MAAD,CAAtB;AACA;AACD,KAPD,CAOE,OAAOC,KAAP,EAAc;AACfP,MAAAA,SAAS,IAAIA,SAAS,CAACO,KAAD,CAAtB;AACA;;AACDN,IAAAA,QAAQ,IAAIA,QAAQ,EAApB;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,GAdyB,EAe1B,CAACA,YAAD,EAAeJ,SAAf,EAA0BE,QAA1B,EAAoCD,SAApC,EAA+CF,WAA/C,CAf0B,CAA3B;AAkBA,SAAO;AACNI,IAAAA,SADM;AAENE,IAAAA;AAFM,GAAP;AAIA,CA9BD;;GAAMP,W;;AAgCN,eAAeA,WAAf","sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\nexport interface MutationHookArgument {\r\n\tapiCallback: (data: any) => Promise<any>;\r\n\tonSuccess: (result: any) => void;\r\n\tonFailure: (error: any) => void;\r\n\tonFinish: () => void;\r\n}\r\n\r\nconst useMutation = ({\r\n\tapiCallback,\r\n\tonSuccess,\r\n\tonFailure,\r\n\tonFinish,\r\n}: MutationHookArgument) => {\r\n\tconst [isLoading, setIsLoading] = useState<boolean>(false);\r\n\r\n\tconst request = useCallback(\r\n\t\tasync (data: any) => {\r\n\t\t\ttry {\r\n\t\t\t\tsetIsLoading(true);\r\n\t\t\t\tconst result = await apiCallback(data);\r\n\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tonSuccess && onSuccess(result);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tonFailure && onFailure(error);\r\n\t\t\t}\r\n\t\t\tonFinish && onFinish();\r\n\t\t\tsetIsLoading(false);\r\n\t\t},\r\n\t\t[setIsLoading, onSuccess, onFinish, onFailure, apiCallback]\r\n\t);\r\n\r\n\treturn {\r\n\t\tisLoading,\r\n\t\trequest,\r\n\t};\r\n};\r\n\r\nexport default useMutation;\r\n"]},"metadata":{},"sourceType":"module"}